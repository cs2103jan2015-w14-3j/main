//@author: a0116390l



	/**
	 * origin: src\com\tasma\ui\JTextFieldLimit.java
	 */

package com.tasma.ui;

import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

public class JTextFieldLimit extends PlainDocument {

	private static final long serialVersionUID = -2574407077586712950L;
	
	private int limit;
	
	JTextFieldLimit(int limit) {
		super();
		this.limit = limit;
	}
	
	JTextFieldLimit(int limit, boolean upper) {
	    super();
	    this.limit = limit;
	}
	
	 public void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {
		 if (str == null) {
			 return;
		 }
	
		 if ((getLength() + str.length()) <= limit) {
		     super.insertString(offset, str, attr);
		 }
	}
}

	// End of segment: src\com\tasma\ui\JTextFieldLimit.java





	/**
	 * origin: src\com\tasma\ui\MyScrollBarUI.java
	 */

public class MyScrollBarUI extends BasicScrollBarUI{
	
	private static final int SCROLL_BAR_ALPHA_ROLLOVER = 150;
    private static final int SCROLL_BAR_ALPHA = 100;
    private static final int THUMB_BORDER_SIZE = 2;
    private static final int THUMB_SIZE = 8;
    private static final Color THUMB_COLOR = Color.BLACK;
	
	protected JButton createZeroButton() {
	    JButton button = new JButton("zero button");
	    Dimension zeroDim = new Dimension(0,0);
	    button.setPreferredSize(zeroDim);
	    button.setMinimumSize(zeroDim);
	    button.setMaximumSize(zeroDim);
	    return button;
	}

	@Override
	protected JButton createDecreaseButton(int orientation) {
	    return createZeroButton();
	}

	@Override
	protected JButton createIncreaseButton(int orientation) {
	    return createZeroButton();
	}


	@Override
	protected void paintTrack(Graphics g, JComponent c, Rectangle trackBounds) {
	    //own painting if needed
	}

	@Override
	protected void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds) {
		int alpha = isThumbRollover() ? SCROLL_BAR_ALPHA_ROLLOVER : SCROLL_BAR_ALPHA;
        int orientation = scrollbar.getOrientation();
        int arc = THUMB_SIZE;
        int x = thumbBounds.x + THUMB_BORDER_SIZE;
        int y = thumbBounds.y + THUMB_BORDER_SIZE;

        int width = orientation == JScrollBar.VERTICAL ?
                THUMB_SIZE : thumbBounds.width - (THUMB_BORDER_SIZE * 2);
        width = Math.max(width, THUMB_SIZE);

        int height = orientation == JScrollBar.VERTICAL ?
                thumbBounds.height - (THUMB_BORDER_SIZE * 2) : THUMB_SIZE;
        height = Math.max(height, THUMB_SIZE);

        Graphics2D graphics2D = (Graphics2D) g.create();
        graphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        graphics2D.setColor(new Color(THUMB_COLOR.getRed(),
                THUMB_COLOR.getGreen(), THUMB_COLOR.getBlue(), alpha));
        graphics2D.fillRoundRect(x, y, width, height, arc, arc);
        graphics2D.dispose();
	}
}

	// End of segment: src\com\tasma\ui\MyScrollBarUI.java





	/**
	 * origin: src\com\tasma\ui\TasmaGUI.java
	 */

package com.tasma.ui;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.net.URL;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;

import javax.swing.DefaultListSelectionModel;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollBar;
import javax.swing.JTextArea;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListCellRenderer;
import javax.swing.UIManager;

import com.tasma.Controller;
import com.tasma.InvalidInputException;
import com.tasma.Task;
import com.tasma.TaskType;
import com.tasma.config.Config;

public class TasmaGUI extends JFrame implements TasmaUserInterface {
	
	private static final String SHOW_HINT_CONFIG_KEY = "showhint";
	private static final String SHOW_HINT_CONFIG_YES_VALUE = "yes";

	private static final long serialVersionUID = 7369112773183099080L;

	private static final int WINDOW_DEFAULT_WIDTH = 640;
	private static final int MAX_TASK_DISPLAY_COUNT = 8;
	private static final String DONE_IMG_PATH = "/com/tasma/res/done.png";
	private static final String FRAME_ICON_PATH = "/com/tasma/res/logo.png";

	private Controller controller;
	
	private JPanel contentPane;
	private JPanel headerPanel;
	private PlaceholderTextField textCommand;
	private JTextArea textMessage = new JTextArea();
	private JLabel textHeader = new JLabel();
	private CommandHintFrame commandHintFrame = new CommandHintFrame();
	private JList<Object> listTasks = new JList<Object>();
	private JScrollPane listTasksScrollPane = new JScrollPane();
	
	/**
	 * Create the frame.
	 */
	public TasmaGUI() {
		decorateFrame();
		addWindowEvents();

		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		BorderLayout contentPaneLayout = new BorderLayout();
		contentPane.setLayout(contentPaneLayout);
		setContentPane(contentPane);

		initTextHeader();
		initTxtCmd();
		initTxtMsg();

		initTaskLists();
		initScrollPane();
		
		updateWindowHeight();
	}

	private void decorateFrame() {
		setUIFont (new javax.swing.plaf.FontUIResource(Palette.UI_FONT_DEFAULT));
		
		setTitle("TASMA");
		setIconImage(createImage(FRAME_ICON_PATH, ""));
		setAlwaysOnTop(true);
		// must use HIDE on CLOSE for the TrayIcon to work properly
		setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);

		// sets the window to center of the screen
		// then move it up a little
		setLocationRelativeTo(null);
		this.setLocation(this.getLocation().x, (int)(0 * this.getLocation().y));
	}

	private static void setUIFont(javax.swing.plaf.FontUIResource f) {
	    Enumeration<Object> keys = UIManager.getDefaults().keys();
	    while (keys.hasMoreElements()) {
	        Object key = keys.nextElement();
	        Object value = UIManager.get(key);
	        if (value instanceof javax.swing.plaf.FontUIResource) {
	            UIManager.put(key, f);
	        }
	    }
	}
	
	private void addWindowEvents() {
		this.addWindowListener(new WindowAdapter() {
			public void windowActivated(WindowEvent e) {
                textCommand.requestFocus();
			}
			public void windowDeactivated(WindowEvent e) {
				commandHintFrame.close();
			}
		});
	}

	private void initTxtCmd() {
		textCommand = new PlaceholderTextField();
		textCommand.setPlaceholder("What would you like to do?");
		textCommand.setPlaceholderColor(Palette.PLACEHOLDER_TEXT);
		textCommand.setBorder(new EmptyBorder(10, 10, 10, 10));
		textCommand.setSize(new Dimension(480, 40));
		textCommand.setBackground(Palette.THEME_BLUE);
		textCommand.setForeground(Color.WHITE);
		textCommand.setCaretColor(Color.WHITE);
		textCommand.setFont(textCommand.getFont().deriveFont(14.0f));
		textCommand.setDocument(new JTextFieldLimit(70));
		textCommand.setColumns(10);
		textCommand.setFocusTraversalKeysEnabled(false);
		JFrame thisFrame = this;
		textCommand.addKeyListener(new KeyListener() {
			public void keyPressed(KeyEvent e) {
				if (e.getKeyCode() == KeyEvent.VK_ESCAPE) { // Pressing the ESC key
					commandHintFrame.close();
					thisFrame.setVisible(false);
					return;
				} else if (e.getKeyCode() == KeyEvent.VK_TAB) {
					textCommand.setText(controller.getLastInput());
				} else if (e.getKeyCode() == KeyEvent.VK_ENTER && !textCommand.getText().trim().equals(""))  { // Pressing the ENTER key
					commandHintFrame.close();
					textMessage.setVisible(false);
					String command = textCommand.getText().trim();
					textCommand.setText("");
					controller.executeInput(command);
				} else {
					try {
						if (Config.getInstance().getProperty(SHOW_HINT_CONFIG_KEY)
								.toLowerCase().equals(SHOW_HINT_CONFIG_YES_VALUE)) {
							EventQueue.invokeLater(new Runnable() {

								@Override
								public void run() {
									try {
										if (textCommand.getText().equals("")) {
											commandHintFrame.close();
										} else {
											commandHintFrame.checkHasHint(textCommand.getText(), textCommand);
										}
									} catch (InvalidInputException e1) {
									}
								}	
							});
						}
					} catch (Exception e1) {}
				}
			}

			@Override
			public void keyTyped(KeyEvent e) {}

			@Override
			public void keyReleased(KeyEvent e) {}
		});
		headerPanel.add(textCommand, BorderLayout.PAGE_START);
	}

	private void initTxtMsg() {
		textMessage.setEditable(false);
		textMessage.setBackground(Color.WHITE);
		textMessage.setRows(1);
		textMessage.setLineWrap(true);
		textMessage.setVisible(false);
		textMessage.setWrapStyleWord(true);
		textMessage.setTabSize(3);
		textMessage.setFont(textMessage.getFont().deriveFont(13.0f));
		textMessage.setBorder(new EmptyBorder(10, 10, 10, 10));
		textMessage.setFocusTraversalKeysEnabled(false);
		contentPane.add(textMessage, BorderLayout.PAGE_END);
	}

	private void initTaskLists() {
		listTasks.setFocusable(false);
		listTasks.setSelectionModel(new DisabledItemSelectionModel());
		listTasks.setCellRenderer(new CustomListRenderer());
	}

	private void initScrollPane() {
		listTasksScrollPane.getVerticalScrollBar().setUI(new MyScrollBarUI());
		listTasksScrollPane.getVerticalScrollBar().setPreferredSize(new Dimension(12, 0));
		listTasksScrollPane.getVerticalScrollBar().setBackground(Color.WHITE);
		listTasksScrollPane.setBorder(new EmptyBorder(0, 0, 0, 0));
		listTasksScrollPane.setBackground(Color.WHITE);
		listTasksScrollPane.setPreferredSize(new Dimension(480, 220));
		listTasksScrollPane.setFocusable(false);
		
		// provide scrolling support for list scroll pane's scroll bar
		JScrollBar vertical = listTasksScrollPane.getVerticalScrollBar();
		InputMap im = vertical.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		im.put(KeyStroke.getKeyStroke("DOWN"), "positiveUnitIncrement");
		im.put(KeyStroke.getKeyStroke("UP"), "negativeUnitIncrement");

		contentPane.add(listTasksScrollPane, BorderLayout.CENTER);
		listTasksScrollPane.setViewportView(listTasks);
	}
	
	// End of segment: src\com\tasma\ui\TasmaGUI.java





	/**
	 * origin: src\com\tasma\ui\TasmaGUI.java
	 */

	//For disabling the selection capability of the list
	private class DisabledItemSelectionModel extends DefaultListSelectionModel {

		private static final long serialVersionUID = 1L;

		@Override
		public void setSelectionInterval(int index0, int index1) {
			super.setSelectionInterval(-1, -1);
		}
	}

	@Override
	public void displayTasks(List<Task> tasks) {
		List<Object> finalList = UITaskListSorter.sort(tasks);
		listTasks.setListData(finalList.toArray());
		updateWindowHeight();
	}

	@Override
	public void displayMessage(String message) {
		displayMessage(message, Palette.MESSAGE_DEFAULT);
	}

	@Override
	public void displayMessage(String message, Color color) {
		if (message.equals("")) {
			textMessage.setVisible(false);
		} else {
			textMessage.setText(message);
			textMessage.setForeground(color);
			textMessage.setVisible(true);
		}
		updateWindowHeight();
	}

	public void editCmdDisplay (String task) {
		textCommand.setText(task);
	}

	protected void updateWindowHeight() {
		int height = headerPanel.getSize().height;
		listTasks.setVisibleRowCount(Math.min(listTasks.getModel().getSize(), MAX_TASK_DISPLAY_COUNT));
		height += listTasks.getPreferredScrollableViewportSize().height;
		height += 20;
		if (textMessage.isVisible()) {
			height += textMessage.getPreferredSize().height;
		}
		this.getContentPane().setPreferredSize(new Dimension(WINDOW_DEFAULT_WIDTH, height));
		this.pack();
	}
	
	 //Obtain the image URL
    protected static Image createImage(String path, String description) {
        URL imageURL = TrayIcon.class.getResource(path);

        if (imageURL == null) {
            System.err.println("Resource not found: " + path);
            return null;
        } else {
            return (new ImageIcon(imageURL, description)).getImage();
        }
    }

    @SuppressWarnings("deprecation")
	@Override
    public void show() {

		setLocationRelativeTo(null);
		this.setLocation(this.getLocation().x, 0);
    	super.show();
    	setState(NORMAL);
    	toFront();
    }

	// End of segment: src\com\tasma\ui\TasmaGUI.java





	/**
	 * origin: src\com\tasma\ui\TasmaGUI.java
	 */

		        Image img = createImage(DONE_IMG_PATH, "");
		        ImageIcon donePic = new ImageIcon(img);
		        JLabel mkDone = new JLabel(donePic);
		        Dimension prefSize = new Dimension(30,30);
		        mkDone.setPreferredSize(prefSize);
		        mkDone.setVisible(task.isDone());
		        mkDone.setBackground(null);
		        c = new GridBagConstraints();
		        c.fill = GridBagConstraints.HORIZONTAL;
		        c.gridx = 2;
		        c.gridy = 0;
		        panel.add(mkDone, c);
		        
			}
	        return panel;
	    }
	}
}

	// End of segment: src\com\tasma\ui\TasmaGUI.java





	/**
	 * origin: src\com\tasma\ui\ZebraJList.java
	 */

package com.tasma.ui;

@SuppressWarnings("rawtypes")
public class ZebraJList extends javax.swing.JList{
	
	private static final long serialVersionUID = 1L;
	private java.awt.Color rowColors[] = new java.awt.Color[2];
    private boolean drawStripes = false;
    
    public ZebraJList() {};
    
    @SuppressWarnings("unchecked")
	public ZebraJList(javax.swing.ListModel dataModel) {
        super(dataModel);
    }
    @SuppressWarnings("unchecked")
	public ZebraJList(Object[] listData) {
        super(listData);
    }
    @SuppressWarnings("unchecked")
	public ZebraJList(java.util.Vector<?> listData) {
        super(listData);
    }
    
    /** Add zebra stripes to the background. */
    public void paintComponent(java.awt.Graphics g)
    {
        drawStripes = (getLayoutOrientation()==VERTICAL) && isOpaque();
        if (!drawStripes) {
            super.paintComponent(g);
            return;
        }
        
        // Paint zebra background stripes
        updateZebraColors();
        final java.awt.Insets insets = getInsets();
        final int w   = getWidth()  - insets.left - insets.right;
        final int h   = getHeight() - insets.top  - insets.bottom;
        final int x   = insets.left;
        int y         = insets.top;
        int nRows     = 0;
        int startRow  = 0;
        int rowHeight = getFixedCellHeight(); 
        if (rowHeight > 0)
            nRows = h / rowHeight;
        else {
            // Paint non-uniform height rows first
            final int nItems = getModel().getSize( );
            rowHeight = 17; // A default for empty lists
            for ( int i = 0; i < nItems; i++, y+=rowHeight ) {
                rowHeight = getCellBounds( i, i ).height;
                g.setColor( rowColors[i&1] );
                g.fillRect( x, y, w, rowHeight );
            }
            // Use last row height for remainder of list area
            nRows    = nItems + (insets.top + h - y) / rowHeight;
            startRow = nItems;
        }
        
        for (int i = startRow; i < nRows; i++, y+=rowHeight) {
            g.setColor(rowColors[i&1]);
            g.fillRect(x, y, w, rowHeight);
        }
        final int remainder = insets.top + h - y;
        if (remainder > 0) {
            g.setColor(rowColors[nRows&1]);
            g.fillRect(x, y, w, remainder);
        }
 
        // Paint component
        setOpaque(false);
        super.paintComponent(g);
        setOpaque(true);
    }
    
    /** Wrap a cell renderer to add zebra stripes behind list cells. */
    private class RendererWrapper implements javax.swing.ListCellRenderer {
        public javax.swing.ListCellRenderer ren = null;
 
        @SuppressWarnings("unchecked")
		public java.awt.Component getListCellRendererComponent(
            javax.swing.JList list, Object value, int index,
            boolean isSelected, boolean cellHasFocus)
        {
            final java.awt.Component c = ren.getListCellRendererComponent(
                list, value, index, isSelected, cellHasFocus);
            if (!isSelected && drawStripes)
                c.setBackground(rowColors[index&1]);
            return c;
        }
    }
    
    private RendererWrapper wrapper = null;
    
    /** Return the wrapped cell renderer. */
    public javax.swing.ListCellRenderer getCellRenderer() {
        final javax.swing.ListCellRenderer ren = super.getCellRenderer();
        if (ren == null)
            return null;
        if (wrapper == null)
            wrapper = new RendererWrapper();
        wrapper.ren = ren;
        return wrapper;
    }
    
    /** Compute zebra background stripe colors. */
    private void updateZebraColors( ) {
        if ( (rowColors[0] = getBackground( )) == null ) {
            rowColors[0] = rowColors[1] = java.awt.Color.white;
            return;
        }
        final java.awt.Color sel = getSelectionBackground( );
        if ( sel == null ) {
            rowColors[1] = rowColors[0];
            return;
        }
        final float[] bgHSB = java.awt.Color.RGBtoHSB(
            rowColors[0].getRed( ), rowColors[0].getGreen( ),
            rowColors[0].getBlue( ), null );
        final float[] selHSB  = java.awt.Color.RGBtoHSB(
            sel.getRed( ), sel.getGreen( ), sel.getBlue( ), null );
        rowColors[1] = java.awt.Color.getHSBColor(
            (selHSB[1]==0.0||selHSB[2]==0.0) ? bgHSB[0] : selHSB[0],
            0.1f * selHSB[1] + 0.9f * bgHSB[1],
            bgHSB[2] + ((bgHSB[2]<0.5f) ? 0.05f : -0.05f) );
    }
}

	// End of segment: src\com\tasma\ui\ZebraJList.java





